Игра змейка (4/20)
Одним из игровых объектов будет яблоко. Создай для него класс Apple и унаследуй его от класса GameObject.

Чтобы отобразить яблоко на игровом поле, можно покрасить ячейку, содержащую яблоко, в какой-нибудь цвет. Или можно вывести в этой ячейке какой-нибудь символ, похожий на яблоко. Пусть класс Apple хранит этот символ в переменной APPLE_SIGN.

В классе Apple добавь метод draw(Game): он будет отрисовывать яблоко на игровом поле. Для этого в методе draw(Game game) нужно вызвать: game.setCellValueEx(...)..

Так как в классе Apple используются классы Game и Color, а эти (и другие) классы "движка" находятся в пакете com.javarush.engine.cell, то чтобы ими пользоваться, класс Apple должен содержать такой импорт:
import com.javarush.engine.cell.*;

Чтобы посмотреть, как будет выглядеть яблоко, в методе createGame() создай новое с координатами (7, 7) и вызови у него метод draw(Game).


Требования:
1. Должен существовать публичный класс Apple.
2. Класс Apple должен быть наследником класса GameObject.
3. В классе Apple должен существовать один конструктор с двумя параметрами типа int (x и y), который вызывает конструктор базового класса с параметрами x и y, используя ключевое слово super.
4. В классе Apple должно существовать приватное статическое final поле String APPLE_SIGN, инициализированное при объявлении. Например, использовать можно UTF-16 символ яблока "\uD83C\uDF4E".
5. В классе Apple должен существовать публичный void метод draw(Game).
6. В методе draw(Game) должен быть вызван метод setCellValueEx(int, int, Color, String, Color, int) у объекта типа Game с параметрами: x, y, Color.NONE, APPLE_SIGN, <цвет яблока>, 75. (<цвет яблока> используй какой тебе нравится, например, Color.GREEN).
7. В методе createGame() класса SnakeGame должно быть создано новое яблоко (экземпляр класса Apple) с координатами: 7, 7.
8. У созданного яблока должен быть вызван метод draw(Game). В качестве параметра метода передай this.
9. В классе Apple должен быть импорт всего содержимого пакета com.javarush.engine.cell.




Игра змейка (5/20)
Теперь займемся змейкой, а тестовое создание и отрисовку яблока в createGame() удалим.

Создай класс Snake. Змейка будет состоять из нескольких ячеек, т.е. из нескольких GameObject-ов. Кроме того, их количество может изменяться: оно будет увеличиваться при поедании яблок. Список всех сегментов змейки будем хранить в поле List<GameObject> snakeParts.

В классе Snake добавь конструктор, который будет создавать сразу три сегмента змейки.


Требования:
1. В методе createGame() класса SnakeGame не должно создаваться новое яблоко.
2. Должен существовать публичный класс Snake.
3. В классе Snake должен существовать один публичный конструктор с двумя параметрами типа int (x и y).
4. В классе Snake должно быть создано приватное поле List<GameObject> snakeParts, инициализированное при объявлении новым списком типа ArrayList<>.
5. В конструкторе должны быть созданы три объекта типа GameObject с параметрами: первый – (x, y); второй – (x + 1, y); третий – (x + 2, y).
6. Созданные в конструкторе объекты типа GameObject должны быть добавлены в список snakeParts в порядке: первый, второй, третий.




Игра змейка (6/20)
Когда у нас уже есть змейка, нужно её отрисовать. Для этого, по аналогии с классом Apple, в классе Snake создай константы HEAD_SIGN и BODY_SIGN, которые будут хранить символы для отрисовки головы и тела змейки. Также создай метод draw(Game), который должен отрисовывать змейку на игровом поле.

Управлять отрисовкой змейки будем из класса SnakeGame. Поэтому создай переменную Snake snake в классе SnakeGame: в ней будет храниться текущее состояние змейки.

В методе createGame() создай новую змейку в центре игрового поля и присвой её переменной snake. В методе drawScene() вызови у змейки метод draw(Game), чтобы отобразить её на игровом поле.


Требования:
1. В классе Snake должно существовать приватное статическое final поле String HEAD_SIGN, инициализированное при объявлении. Например, использовать можно UTF-16 символ "\uD83D\uDC7E".
2. В классе Snake должно существовать приватное статическое final поле String BODY_SIGN, инициализированное при объявлении. Например, использовать можно UTF-8 символ "\u26AB".
3. В классе Snake должен существовать публичный void метод draw(Game game).
4. В методе draw(Game) должен вызываться метод setCellValue(int, int, String) класса Game для каждого объекта GameObject из списка snakeParts.
5. Метод setCellValue(int, int, String) для головы змеи (элемент с индексом 0 из списка snakeParts) должен вызываться с параметрами x и y головы, и HEAD_SIGN.
6. Метод setCellValue(int, int, String) для каждого сегмента тела змеи (элементы с индексом не 0 из списка snakeParts) должен вызываться с параметрами x и y сегмента, и BODY_SIGN.
7. В классе SnakeGame должно существовать приватное поле Snake snake.
8. В методе createGame() класса SnakeGame должна быть создана новая змея (экземпляр класса Snake) с координатами: WIDTH / 2, HEIGHT / 2 перед вызовом метода drawScene().
9. В методе createGame() полю snake необходимо присвоить ссылку на созданный объект типа Snake.
10. В методе drawScene() последним должен быть вызван метод draw(Game) у объекта snake. В качестве параметра метода передай this.
11. В классе Snake должен быть импорт всего содержимого пакета com.javarush.engine.cell.
